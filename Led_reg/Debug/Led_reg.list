
Led_reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  08000424  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00010424  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00010424  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  08000424  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000424  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000424  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010424  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005c2  00000000  00000000  00010454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000017a  00000000  00000000  00010a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dac8  00000000  00000000  00010c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000666  00000000  00000000  0001e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ee08  00000000  00000000  0001ed76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006db7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  0006dbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000404 	.word	0x08000404

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000404 	.word	0x08000404

080001d4 <Timer1_init>:

/*
 * Initialize Timer 1
 * */
void Timer1_init()
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	uint32_t F_timer, prescaler;

	// F_timer = f_PCLK / (PSC + 1)
	F_timer = 1 / T_timer;
 80001da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001de:	607b      	str	r3, [r7, #4]
	prescaler = f_PCLK / F_timer - 1;
 80001e0:	4a13      	ldr	r2, [pc, #76]	; (8000230 <Timer1_init+0x5c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80001e8:	3b01      	subs	r3, #1
 80001ea:	603b      	str	r3, [r7, #0]

	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; 		// TIM1 clock enable
 80001ec:	4b11      	ldr	r3, [pc, #68]	; (8000234 <Timer1_init+0x60>)
 80001ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001f0:	4a10      	ldr	r2, [pc, #64]	; (8000234 <Timer1_init+0x60>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6453      	str	r3, [r2, #68]	; 0x44

	TIM1->PSC |= prescaler;
 80001f8:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <Timer1_init+0x64>)
 80001fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001fc:	490e      	ldr	r1, [pc, #56]	; (8000238 <Timer1_init+0x64>)
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	4313      	orrs	r3, r2
 8000202:	628b      	str	r3, [r1, #40]	; 0x28

	TIM1->ARR = AutoReload;
 8000204:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <Timer1_init+0x64>)
 8000206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800020a:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->CR1 |= TIM_CR1_CEN;					// Counter enable
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <Timer1_init+0x64>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a09      	ldr	r2, [pc, #36]	; (8000238 <Timer1_init+0x64>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(1<<4);						// Counter used as up counter
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <Timer1_init+0x64>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <Timer1_init+0x64>)
 800021e:	f023 0310 	bic.w	r3, r3, #16
 8000222:	6013      	str	r3, [r2, #0]
}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	00f42400 	.word	0x00f42400
 8000234:	40023800 	.word	0x40023800
 8000238:	40010000 	.word	0x40010000

0800023c <delay_ms>:

/*
 * delay by ms
 * */
void delay_ms(int ms)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	TIM1->CNT = 0;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <delay_ms+0x28>)
 8000246:	2200      	movs	r2, #0
 8000248:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM1->CNT < ms);
 800024a:	bf00      	nop
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <delay_ms+0x28>)
 800024e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	429a      	cmp	r2, r3
 8000254:	d3fa      	bcc.n	800024c <delay_ms+0x10>
}
 8000256:	bf00      	nop
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	40010000 	.word	0x40010000

08000268 <SystemClock_config>:

/*
 * Initialize system clock
 * */
void SystemClock_config()
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSION;				// enable HSI
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <SystemClock_config+0x68>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <SystemClock_config+0x68>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));		// see that HSI is ready or not
 8000278:	bf00      	nop
 800027a:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <SystemClock_config+0x68>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 0302 	and.w	r3, r3, #2
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <SystemClock_config+0x12>

	// Power regulator
	PWR->CR |= (1<<15);
 8000286:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <SystemClock_config+0x6c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a12      	ldr	r2, [pc, #72]	; (80002d4 <SystemClock_config+0x6c>)
 800028c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000290:	6013      	str	r3, [r2, #0]

	// Flash latency setup
	FLASH->ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 8000292:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <SystemClock_config+0x70>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <SystemClock_config+0x70>)
 8000298:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800029c:	f043 0305 	orr.w	r3, r3, #5
 80002a0:	6013      	str	r3, [r2, #0]

	// Clock configuration register for setting
	RCC->CFGR |= RCC_CFGR_SW_HSI;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <SystemClock_config+0x68>)
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <SystemClock_config+0x68>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	6093      	str	r3, [r2, #8]
	while ( (RCC->CFGR & (1<<2)) || (RCC->CFGR & (1<<3)) );
 80002aa:	bf00      	nop
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <SystemClock_config+0x68>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	f003 0304 	and.w	r3, r3, #4
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d1f9      	bne.n	80002ac <SystemClock_config+0x44>
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <SystemClock_config+0x68>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	f003 0308 	and.w	r3, r3, #8
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f3      	bne.n	80002ac <SystemClock_config+0x44>
}
 80002c4:	bf00      	nop
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40007000 	.word	0x40007000
 80002d8:	40023c00 	.word	0x40023c00

080002dc <main>:
void GPIO_init(void);



int main()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	SystemClock_config();
 80002e0:	f7ff ffc2 	bl	8000268 <SystemClock_config>
	GPIO_init();
 80002e4:	f000 f81c 	bl	8000320 <GPIO_init>
	Timer1_init();
 80002e8:	f7ff ff74 	bl	80001d4 <Timer1_init>

	while(1)
	{
		toggle_led;
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <main+0x40>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d106      	bne.n	8000306 <main+0x2a>
 80002f8:	4b08      	ldr	r3, [pc, #32]	; (800031c <main+0x40>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a07      	ldr	r2, [pc, #28]	; (800031c <main+0x40>)
 80002fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000302:	6153      	str	r3, [r2, #20]
 8000304:	e005      	b.n	8000312 <main+0x36>
 8000306:	4b05      	ldr	r3, [pc, #20]	; (800031c <main+0x40>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <main+0x40>)
 800030c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000310:	6153      	str	r3, [r2, #20]
		delay_ms(500);
 8000312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000316:	f7ff ff91 	bl	800023c <delay_ms>
		toggle_led;
 800031a:	e7e7      	b.n	80002ec <main+0x10>
 800031c:	40020c00 	.word	0x40020c00

08000320 <GPIO_init>:
}



void GPIO_init(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<3);		// IO port D clock enable
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <GPIO_init+0x40>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <GPIO_init+0x40>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= (1<<26);	// General purpose output mode
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <GPIO_init+0x44>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <GPIO_init+0x44>)
 8000336:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800033a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<27);
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <GPIO_init+0x44>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a08      	ldr	r2, [pc, #32]	; (8000364 <GPIO_init+0x44>)
 8000342:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000346:	6013      	str	r3, [r2, #0]

	GPIOD->OTYPER &= ~(1<<13);	// Output push-pull (reset state)
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <GPIO_init+0x44>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	4a05      	ldr	r2, [pc, #20]	; (8000364 <GPIO_init+0x44>)
 800034e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000352:	6053      	str	r3, [r2, #4]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40023800 	.word	0x40023800
 8000364:	40020c00 	.word	0x40020c00

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800036c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	; (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	; (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 f811 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff9f 	bl	80002dc <main>

0800039e <LoopForever>:

LoopForever:
  b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ac:	08000424 	.word	0x08000424
  ldr r2, =_sbss
 80003b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b4:	2000001c 	.word	0x2000001c

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	4d0d      	ldr	r5, [pc, #52]	; (80003f4 <__libc_init_array+0x38>)
 80003c0:	4c0d      	ldr	r4, [pc, #52]	; (80003f8 <__libc_init_array+0x3c>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	2600      	movs	r6, #0
 80003c8:	42a6      	cmp	r6, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	4d0b      	ldr	r5, [pc, #44]	; (80003fc <__libc_init_array+0x40>)
 80003ce:	4c0c      	ldr	r4, [pc, #48]	; (8000400 <__libc_init_array+0x44>)
 80003d0:	f000 f818 	bl	8000404 <_init>
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	10a4      	asrs	r4, r4, #2
 80003d8:	2600      	movs	r6, #0
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e4:	4798      	blx	r3
 80003e6:	3601      	adds	r6, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ee:	4798      	blx	r3
 80003f0:	3601      	adds	r6, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr
